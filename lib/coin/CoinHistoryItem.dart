import 'dart:collection';
import 'dart:convert';
import 'dart:io';

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_module_plugin/coin/TextView.dart';
import 'package:flutter_module_plugin/const/ConstMethodChannel.dart';
import 'package:flutter_module_plugin/const/ConstRequestUrl.dart';
import 'package:flutter_module_plugin/entity/coin_list_data.dart';
import 'package:flutter_module_plugin/net/HttpRequest.dart';
import 'package:flutter_module_plugin/second/SecondPage.dart';

class CoinHistoryItem extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        title: "",
        home: Scaffold(
            appBar: PreferredSize(
              preferredSize: Size.fromHeight(44),
              child: AppBar(
                leading: Text("返回"),
                automaticallyImplyLeading: true,
                brightness: Brightness.light,
                backgroundColor: Colors.white,
                centerTitle: true,
                title: Text(
                  "金币明细",
                  style: TextStyle(
                      color: const Color(0xff333333),
                      fontWeight: FontWeight.w700,
                      fontSize: 16),
                ),
              ),
            ),
            body: CoinHistoryFull()));
  }
}

class CoinHistoryFull extends StatefulWidget {
  @override
  CoinHistoryState createState() {
    return CoinHistoryState();
  }
}

class CoinHistoryState extends State<CoinHistoryFull> {
  String host;
  Map _header;
  static const myPlugin =
      const MethodChannel(ConstMethodChannel.CHANNEL_NAME_COIN);
  Autogenerated netData;

  @override
  void initState() {
    super.initState();
//    getHost();
//    getHeaders();
  }

  void getHost() async {
    host = await myPlugin.invokeMethod(ConstMethodChannel.METHOD_NAME_HOST);
    print("ljwx-host" + host);
  }

  void getHeaders() async {
    var map =
        await myPlugin.invokeMethod(ConstMethodChannel.METHOD_NAME_HEADERS);
    _header = new Map<String, dynamic>.from(map);
    print(_header);
  }

  void update() {
    setState(() {});
  }

  void getCoinList() async {
    NET.request(
        url: host + ConstRequestUrl.TASK_COIN_HISTORY,
        headers: _header,
        method: RequestMethod.get,
        contentType: ContentType.json,
        responseType: ResponseType.json,
        success: (res) {
          var decode = json.decode(res.toString());
          var coinHistoryData = Autogenerated.fromJson(decode);
          netData = coinHistoryData;
          print(coinHistoryData.data.transactions);
//          print(coinHistoryData.data.coupons[0].title);
          print(res.data);
          update();
        },
        error: (e) {
          print(e);
        });
  }

  void getCouponCenter() async {
    print("ljwx-dio-get");

    var result = await myPlugin.invokeMethod("getToken");
    print(result);
    Map<String, Object> map = {"user": 101};
    var user = await myPlugin.invokeMethod("test", map);
    var from = new Map<String, dynamic>.from(user);
    print(from["ljwx"]);
    print(user);
  }

  @override
  Widget build(BuildContext context) {
    return ListView.separated(
      itemCount: (netData == null) ? 1 : netData.data.transactions.length + 1,
      itemBuilder: (context, index) {
        if (index == 0) {
          return Container(
            constraints: BoxConstraints(maxHeight: 147, minHeight: 147),
            color: const Color(0xffF78217),
            child: Center(
              child: RaisedButton(
                child: Text("getData2"),
                onPressed: () {
//                  getCoinList();
                  Navigator.push(context,
                      MaterialPageRoute(builder: (context) => SecondPage()));
                },
              ),
            ),
          );
        } else {
          var parent = netData.data.transactions[index - 1];
          return ListView.separated(
              shrinkWrap: true,
              physics: NeverScrollableScrollPhysics(),
              itemCount: parent.list.length + 1,
              itemBuilder: (context, cIndext) {
                if (cIndext == 0) {
                  return ItemTitle(index == 1, parent.date);
                } else {
                  var child = parent.list[cIndext - 1];
                  return ItemChild(
                      child.desc, child.createdAt, child.amount.toString());
                }
              },
              separatorBuilder: (context, sIndex) {
                return Container(
                  color: const Color(0xffdddbdb),
                  constraints: BoxConstraints(maxHeight: 0.5),
                );
              });
        }
      },
      separatorBuilder: (context, index) {
        return Container(
          color: const Color(0xffdddbdb),
          constraints: BoxConstraints(maxHeight: 0.5),
        );
      },
    );
  }
}

class ItemTitle extends StatelessWidget {
  bool _isFirst = false;
  String _title = "";

  ItemTitle(bool isFirst, String title) {
    _isFirst = isFirst;
    _title = title;
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      alignment: Alignment.centerLeft,
//      constraints: BoxConstraints(minHeight: 40, maxHeight: 40),
      child: Column(
        children: <Widget>[
          Padding(
            padding: EdgeInsets.only(top: ((_isFirst) ? 0 : 20)),
          ),
          Padding(
            padding: EdgeInsets.symmetric(vertical: 12, horizontal: 15),
            child: Text(
              _title,
              style: TextStyle(
                  fontSize: 16,
                  color: const Color(0xff333333),
                  fontWeight: FontWeight.w700),
            ),
          )
        ],
      ),
    );
  }
}

class ItemChild extends StatelessWidget {
  String title, time, value;

  ItemChild(String title, String time, String value) {
    this.title = title;
    this.time = time;
    this.value = value;
  }

  @override
  Widget build(BuildContext context) {
    return Container(
        constraints: BoxConstraints(
            maxHeight: 73,
            minHeight: 73,
            maxWidth: double.infinity,
            minWidth: double.infinity),
        child: Stack(
          children: <Widget>[
            Positioned(
              left: 15,
              top: 15,
              child: TextViewC3S14(title),
            ),
            Positioned(
              left: 15,
              bottom: 15,
              child: TextViewC9S12(time),
            ),
            Positioned(
              right: 15,
              top: 15,
              child: Text(
                value,
                style: TextStyle(color: const Color(0xFFF78217), fontSize: 16),
              ),
            ),
          ],
        ));
  }
}
